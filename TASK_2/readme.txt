Вариант 15


1.Разработать класс "очередь параметров" в соответствии со следующим заданием:

Состояние класса -

Очередь параметров представляется в виде вектора (массива). Параметром очереди могут быть данные сложного типа, например, первое поле число, второе поле строка символов фиксированной длины. Для описания параметра очереди целесообразно использовать структуру. Память под массив выделяется статически, во время компиляции, и задается массивом фиксированного размера.

Протокол класса -

Определяет возможности создания и инициализации экземпляров класса и правила их использования (методы класса).

Предусмотреть следующие возможности:

·          создание экземпляров структуры (параметра) с инициализацией начальным состоянием по умолчанию;

·          пустой конструктор для инициализации экземпляров и массивов экземпляров класса (очереди) по умолчанию;

·          создание экземпляров класса (очереди) с инициализацией заданным количеством параметров из массива параметров;

·          ввод значения параметра из входного потока;

·          ввод (добавление) параметра в очередь из входного потока;

·          вывод значения параметра в выходной поток;

·          вывод содержимого очереди (в порядке следования) в выходной поток;

·          добавление параметра, заданного переменной, в очередь;

·          выборка параметра из очереди – копирование параметра в переменную соответствующего типа с удалением из очереди;

·          проверка состояния очереди (пуста, частично заполнена или полна).

2. Проектирование класса рекомендуется начать с представления состояния класса, учитывающего заданные операции, а затем реализации конструкторов и метода вывода. Для отладки и исчерпывающего тестирования других методов разработанного класса реализовать диалоговую программу, которая позволяет вводить параметры отлаживаемых методов. Для обработки ошибочных ситуаций использовать механизм исключительных ситуаций.

3. Повторить разработку класса, реализовав отдельные методы (там, где это оправданно), перегруженными операторами. Состав перегруженных операторов целесообразно согласовать с преподавателем.

4. Еще раз повторить разработку класса при условии, что память под массив необходимой длины выделяется динамически, во время выполнения программы (с помощью оператора new; память задается указателем на char в состоянии класса). Для хранения данных в экземпляре класса не должна использоваться лишняя память.

Дополнить интерфейс класса следующими возможностями:

·          создание экземпляра класса с его инициализацией другим экземпляром класса (копирующий конструктор);

·          переопределение экземпляра класса (с помощью перегруженного оператора присваивания).

Разработать и реализовать прикладную программу, использующую класс, разработанный другим студентом. Задание для прикладной программы разработать самостоятельно и согласовать с преподавателем.
